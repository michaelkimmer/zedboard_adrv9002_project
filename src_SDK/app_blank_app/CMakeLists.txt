# Generated by the Vitis IDE. Do not modify.

cmake_minimum_required(VERSION 3.20)
include(${CMAKE_CURRENT_SOURCE_DIR}/UserConfig.cmake)
project(app_blank_app
LANGUAGES
C CXX
)

# Including the cmake modules from the Vitis Install.
set(CMAKE_MODULE_PATH
"$ENV{XILINX_VITIS}/vitisng-server/scripts/cmake"
${CMAKE_MODULE_PATH}
)
find_package(EmbHost REQUIRED)

set(VITIS_PLATFORM_PATH
C:/zedboard_adrv9002_project/src_SDK/platform_system_top/export/platform_system_top/platform_system_top.xpfm
CACHE STRING
"Vitis Platform"
)

# Generated by the Vitis IDE. Only modify the sections marked as USER SETTINGS.
Set(VitisArch arm64)
set(CMAKE_CXX_STANDARD
14
CACHE STRING
"The C++ standard to use"
)
set(CMAKE_CXX_STANDARD_REQUIRED
ON
)
set(CMAKE_CXX_EXTENSIONS
OFF
)
add_executable(${CMAKE_PROJECT_NAME}.elf "")



###    USER SETTINGS  START    ###

# For adding pre build step.
# Any script can be used as a pre build step
# Uncomment below section to use the pre-build step.
# Example:  To copy a data file into to a pre-defined location.
#add_custom_command(TARGET gzipApp PRE_BUILD
#COMMAND cp   <source location>  <target location>
#)


# For adding post build step.
# Any script can be used as a post build step, it can take the build output as input.
# Uncomment below section to use the post build step.
# Example:  To copy the binary to a pre-defined location.
#add_custom_command(TARGET gzipApp POST_BUILD
#COMMAND cp  $<TARGET_FILE:gzipApp>  ${CMAKE_SOURCE_DIR}/../
#)

###   END OF USER SETTINGS SECTION ####

####    CAUTION in updating below section    ####
# These setting are required to build the application as per the project template used.
#  Update below only to modify the default settings.

# The sources listed below will be updated automtically, based on changes done to the sources.
# This updation is done as part of the pre-cmake configure step.
# When running cmake without using Vitis-CLI Or Vitis-IDE,

if(DEFINED SYSROOT)
set(HOST_COMPILE_OPTIONS
--sysroot=${SYSROOT}
)
set(HOST_INCLUDE_DIRECTORIES
${SYSROOT}/usr/include
)
set(HOST_LINK_DIRECTORIES
${SYSROOT}/usr/lib
)
set(HOST_LINK_OPTIONS
--sysroot=${SYSROOT}
)
else()

if(CMAKE_EXPORT_COMPILE_COMMANDS)
set(CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES
${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES}
)
set(CMAKE_C_STANDARD_INCLUDE_DIRECTORIES
${CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES}
)
endif()

endif()

target_sources(app_blank_app.elf
PRIVATE
    src/helloworld.c
)
# Below compile definitions are derived from the application template used to
# create this project.Update them to suite your requirement. They will not be
# modified further by the tool.If new compile definitions needed, they can be
# added to USER_COMPILE_DEFINITIONS
target_compile_definitions(${CMAKE_PROJECT_NAME}.elf
PRIVATE
    ${USER_COMPILE_DEFINITIONS}
)
# Compile Options, derived from the application template used to create this
# project.They will not be modified further by the tool.If new compile options
# needed to be added, they can be added to USER_COMPILE_OPTIONS
target_compile_options(${CMAKE_PROJECT_NAME}.elf
PRIVATE
    -g
    ${HOST_COMPILE_OPTIONS}
    ${USER_COMPILE_OPTIONS}
)
# Include Directories, derived from the application template used to create this
# project.They will not be modified further by the tool.If new sources are
# added, the new INCLUDE Directories can be added to USER_INCLUDE_DIRECTORIES
target_include_directories(${CMAKE_PROJECT_NAME}.elf
PRIVATE
    ${HOST_INCLUDE_DIRECTORIES}
    ${USER_INCLUDE_DIRECTORIES}
)
# Libraries to be linked, derived from the application template used to create
# this project.They will not be modified further by the tool.If new libraries to
# be linked, they can be added to USER_LINK_LIBRARIES.
target_link_libraries(${CMAKE_PROJECT_NAME}.elf
PRIVATE
    ${USER_LINK_LIBRARIES}
)
# Linker Library Search Directories to be passed to linker, derived from the
# application template used to create this project.They will not be modified
# further by the tool.If new library directory to be added, they can be added to
# USER_LINK_DIRECTORIES.
target_link_directories(${CMAKE_PROJECT_NAME}.elf
PRIVATE
    ${HOST_LINK_DIRECTORIES}
    ${USER_LINK_DIRECTORIES}
)
# Linker options, derived from the application template used to create this
# project.They will not be modified further by the tool.If new linker options to
# be added, they can be added to USER_LINK_OPTIONS.
target_link_options(${CMAKE_PROJECT_NAME}.elf
PRIVATE
    ${HOST_LINK_OPTIONS}
    ${USER_LINK_OPTIONS}
)
